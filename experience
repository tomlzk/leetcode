309买卖股票的最佳时期
使用的方法是状态机的方式，后一个情况是由前一个情况得到的，
每个情况有多种可能性，也就是多个状态


313.超级丑数
可以这样去理解这种题目
就是给出一个数组，让数组里面的数字自由组合（可重复），然后按照递增的顺序去将结果排列起来

对于这种问题的解决：
设dp[]数组里面存储的就是这个结果
题目给出的数组是question
dp[0] 里面是1 （这是按照题目要求。不是我所说的自由排列，之后就是按照自由排列的方式了）
dp[1] 里面是给出的数组question中最小的
dp[2] 里面是第二小的，这有几种情况
  情况1. dp[2]里面应该是question中第二小的
  情况2. dp[2]里面应该是question中最小的数字的平方

依据上面的情况dp[3]会更加复杂
为了解决这个问题，必须有这个思维：

例如 n = 10， primes = [2, 3, 5]。 打印出丑数列表：1, 2, 3, 4, 5, 6, 8, 9, 10, 12
首先一定要知道，后面的丑数一定由前面的丑数乘以2，或者乘以3，或者乘以5得来。例如，8,9,10,12一定是1, 2, 3, 4, 5, 6乘以2,3,5三个质数中的某一个得到。

这样的话我们的解题思路就是：从第一个丑数开始，一个个数丑数，并确保数出来的丑数是递增的，直到数到第n个丑数，得到答案。那么问题就是如何递增地数丑数？

观察上面的例子，假如我们用1, 2, 3, 4, 5, 6去形成后面的丑数，我们可以将1, 2, 3, 4, 5, 6分别乘以2, 3, 5，这样得到一共6*3=18个新丑数。也就是说1, 2, 3, 4, 5, 6中的每一个丑数都有一次机会与2相乘，一次机会与3相乘，一次机会与5相乘，来得到更大的一个丑数。一共有18次机会形成18个新丑数。

这样就可以用三个指针

pointer2, 指向1, 2, 3, 4, 5, 6中，还没使用乘2机会的丑数的位置。该指针的前一位已经使用完了乘以2的机会。
pointer3, 指向1, 2, 3, 4, 5, 6中，还没使用乘3机会的丑数的位置。该指针的前一位已经使用完了乘以3的机会。
pointer5, 指向1, 2, 3, 4, 5, 6中，还没使用乘5机会的丑数的位置。该指针的前一位已经使用完了乘以5的机会。
下一次寻找丑数时，则对这三个位置分别尝试使用一次乘2机会，乘3机会，乘5机会，看看哪个最小，最小的那个就是下一个丑数。最后，那个得到下一个丑数的指针位置加一，因为它对应的那次乘法使用完了。

这里需要注意下去重的问题，如果某次寻找丑数，找到了下一个丑数10，则pointer2和pointer5都需要加一，因为5乘2等于10， 2乘5也等于10，这样可以确保10只被数一次。

所以，我们要设置一个nums
让nums = question，让nums中最小的赋值给dp[1]
然后让nums中最小的那个更新一下，更新为dp[index[j]] * question[j]
这个index[j] 代表的是question[j]的使用次数
比如index[0]表示question[0]的使用次数

按照这个描述去看题解大概能懂

337.打家劫舍三
https://blog.csdn.net/acs713/article/details/70212195?ops_request_misc=&request_id=&biz_id=102&utm_term=cannot%20convert%20%27int%20(*)%5B100%5D%5B2&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-70212195.142^v93^control&spm=1018.2226.3001.4187
此网址存储的是c语言二维数组作为函数的参数时出现的一些问题，对我有较强的启发意义。
